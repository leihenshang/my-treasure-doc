// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fastduck/treasure-doc/service/mall/data/model"
)

func newGoodsSpec(db *gorm.DB, opts ...gen.DOOption) goodsSpec {
	_goodsSpec := goodsSpec{}

	_goodsSpec.goodsSpecDo.UseDB(db, opts...)
	_goodsSpec.goodsSpecDo.UseModel(&model.GoodsSpec{})

	tableName := _goodsSpec.goodsSpecDo.TableName()
	_goodsSpec.ALL = field.NewAsterisk(tableName)
	_goodsSpec.ID = field.NewInt32(tableName, "id")
	_goodsSpec.GoodID = field.NewInt32(tableName, "good_id")
	_goodsSpec.Spec = field.NewString(tableName, "spec")
	_goodsSpec.Units = field.NewString(tableName, "units")
	_goodsSpec.SpecVal = field.NewString(tableName, "spec_val")
	_goodsSpec.CreatedAt = field.NewTime(tableName, "created_at")
	_goodsSpec.UpdatedAt = field.NewTime(tableName, "updated_at")
	_goodsSpec.DeletedAt = field.NewField(tableName, "deleted_at")

	_goodsSpec.fillFieldMap()

	return _goodsSpec
}

type goodsSpec struct {
	goodsSpecDo

	ALL       field.Asterisk
	ID        field.Int32
	GoodID    field.Int32
	Spec      field.String // 规格
	Units     field.String // 单位
	SpecVal   field.String // 规格值
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (g goodsSpec) Table(newTableName string) *goodsSpec {
	g.goodsSpecDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goodsSpec) As(alias string) *goodsSpec {
	g.goodsSpecDo.DO = *(g.goodsSpecDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goodsSpec) updateTableName(table string) *goodsSpec {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.GoodID = field.NewInt32(table, "good_id")
	g.Spec = field.NewString(table, "spec")
	g.Units = field.NewString(table, "units")
	g.SpecVal = field.NewString(table, "spec_val")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")

	g.fillFieldMap()

	return g
}

func (g *goodsSpec) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goodsSpec) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["id"] = g.ID
	g.fieldMap["good_id"] = g.GoodID
	g.fieldMap["spec"] = g.Spec
	g.fieldMap["units"] = g.Units
	g.fieldMap["spec_val"] = g.SpecVal
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
}

func (g goodsSpec) clone(db *gorm.DB) goodsSpec {
	g.goodsSpecDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g goodsSpec) replaceDB(db *gorm.DB) goodsSpec {
	g.goodsSpecDo.ReplaceDB(db)
	return g
}

type goodsSpecDo struct{ gen.DO }

type IGoodsSpecDo interface {
	gen.SubQuery
	Debug() IGoodsSpecDo
	WithContext(ctx context.Context) IGoodsSpecDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoodsSpecDo
	WriteDB() IGoodsSpecDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGoodsSpecDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoodsSpecDo
	Not(conds ...gen.Condition) IGoodsSpecDo
	Or(conds ...gen.Condition) IGoodsSpecDo
	Select(conds ...field.Expr) IGoodsSpecDo
	Where(conds ...gen.Condition) IGoodsSpecDo
	Order(conds ...field.Expr) IGoodsSpecDo
	Distinct(cols ...field.Expr) IGoodsSpecDo
	Omit(cols ...field.Expr) IGoodsSpecDo
	Join(table schema.Tabler, on ...field.Expr) IGoodsSpecDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoodsSpecDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoodsSpecDo
	Group(cols ...field.Expr) IGoodsSpecDo
	Having(conds ...gen.Condition) IGoodsSpecDo
	Limit(limit int) IGoodsSpecDo
	Offset(offset int) IGoodsSpecDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodsSpecDo
	Unscoped() IGoodsSpecDo
	Create(values ...*model.GoodsSpec) error
	CreateInBatches(values []*model.GoodsSpec, batchSize int) error
	Save(values ...*model.GoodsSpec) error
	First() (*model.GoodsSpec, error)
	Take() (*model.GoodsSpec, error)
	Last() (*model.GoodsSpec, error)
	Find() ([]*model.GoodsSpec, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoodsSpec, err error)
	FindInBatches(result *[]*model.GoodsSpec, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GoodsSpec) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoodsSpecDo
	Assign(attrs ...field.AssignExpr) IGoodsSpecDo
	Joins(fields ...field.RelationField) IGoodsSpecDo
	Preload(fields ...field.RelationField) IGoodsSpecDo
	FirstOrInit() (*model.GoodsSpec, error)
	FirstOrCreate() (*model.GoodsSpec, error)
	FindByPage(offset int, limit int) (result []*model.GoodsSpec, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoodsSpecDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g goodsSpecDo) Debug() IGoodsSpecDo {
	return g.withDO(g.DO.Debug())
}

func (g goodsSpecDo) WithContext(ctx context.Context) IGoodsSpecDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goodsSpecDo) ReadDB() IGoodsSpecDo {
	return g.Clauses(dbresolver.Read)
}

func (g goodsSpecDo) WriteDB() IGoodsSpecDo {
	return g.Clauses(dbresolver.Write)
}

func (g goodsSpecDo) Session(config *gorm.Session) IGoodsSpecDo {
	return g.withDO(g.DO.Session(config))
}

func (g goodsSpecDo) Clauses(conds ...clause.Expression) IGoodsSpecDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goodsSpecDo) Returning(value interface{}, columns ...string) IGoodsSpecDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goodsSpecDo) Not(conds ...gen.Condition) IGoodsSpecDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goodsSpecDo) Or(conds ...gen.Condition) IGoodsSpecDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goodsSpecDo) Select(conds ...field.Expr) IGoodsSpecDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goodsSpecDo) Where(conds ...gen.Condition) IGoodsSpecDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goodsSpecDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGoodsSpecDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goodsSpecDo) Order(conds ...field.Expr) IGoodsSpecDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goodsSpecDo) Distinct(cols ...field.Expr) IGoodsSpecDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goodsSpecDo) Omit(cols ...field.Expr) IGoodsSpecDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goodsSpecDo) Join(table schema.Tabler, on ...field.Expr) IGoodsSpecDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goodsSpecDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoodsSpecDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goodsSpecDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoodsSpecDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goodsSpecDo) Group(cols ...field.Expr) IGoodsSpecDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goodsSpecDo) Having(conds ...gen.Condition) IGoodsSpecDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goodsSpecDo) Limit(limit int) IGoodsSpecDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goodsSpecDo) Offset(offset int) IGoodsSpecDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goodsSpecDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodsSpecDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goodsSpecDo) Unscoped() IGoodsSpecDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goodsSpecDo) Create(values ...*model.GoodsSpec) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goodsSpecDo) CreateInBatches(values []*model.GoodsSpec, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goodsSpecDo) Save(values ...*model.GoodsSpec) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goodsSpecDo) First() (*model.GoodsSpec, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsSpec), nil
	}
}

func (g goodsSpecDo) Take() (*model.GoodsSpec, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsSpec), nil
	}
}

func (g goodsSpecDo) Last() (*model.GoodsSpec, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsSpec), nil
	}
}

func (g goodsSpecDo) Find() ([]*model.GoodsSpec, error) {
	result, err := g.DO.Find()
	return result.([]*model.GoodsSpec), err
}

func (g goodsSpecDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoodsSpec, err error) {
	buf := make([]*model.GoodsSpec, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goodsSpecDo) FindInBatches(result *[]*model.GoodsSpec, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goodsSpecDo) Attrs(attrs ...field.AssignExpr) IGoodsSpecDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goodsSpecDo) Assign(attrs ...field.AssignExpr) IGoodsSpecDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goodsSpecDo) Joins(fields ...field.RelationField) IGoodsSpecDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goodsSpecDo) Preload(fields ...field.RelationField) IGoodsSpecDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goodsSpecDo) FirstOrInit() (*model.GoodsSpec, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsSpec), nil
	}
}

func (g goodsSpecDo) FirstOrCreate() (*model.GoodsSpec, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsSpec), nil
	}
}

func (g goodsSpecDo) FindByPage(offset int, limit int) (result []*model.GoodsSpec, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goodsSpecDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goodsSpecDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goodsSpecDo) Delete(models ...*model.GoodsSpec) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goodsSpecDo) withDO(do gen.Dao) *goodsSpecDo {
	g.DO = *do.(*gen.DO)
	return g
}
