// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q          = new(Query)
	Doc        *doc
	DocGroup   *docGroup
	GlobalConf *globalConf
	Good       *good
	GoodsSku   *goodsSku
	GoodsSpec  *goodsSpec
	Order      *order
	OrderGood  *orderGood
	Team       *team
	TeamUser   *teamUser
	User       *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Doc = &Q.Doc
	DocGroup = &Q.DocGroup
	GlobalConf = &Q.GlobalConf
	Good = &Q.Good
	GoodsSku = &Q.GoodsSku
	GoodsSpec = &Q.GoodsSpec
	Order = &Q.Order
	OrderGood = &Q.OrderGood
	Team = &Q.Team
	TeamUser = &Q.TeamUser
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:         db,
		Doc:        newDoc(db, opts...),
		DocGroup:   newDocGroup(db, opts...),
		GlobalConf: newGlobalConf(db, opts...),
		Good:       newGood(db, opts...),
		GoodsSku:   newGoodsSku(db, opts...),
		GoodsSpec:  newGoodsSpec(db, opts...),
		Order:      newOrder(db, opts...),
		OrderGood:  newOrderGood(db, opts...),
		Team:       newTeam(db, opts...),
		TeamUser:   newTeamUser(db, opts...),
		User:       newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Doc        doc
	DocGroup   docGroup
	GlobalConf globalConf
	Good       good
	GoodsSku   goodsSku
	GoodsSpec  goodsSpec
	Order      order
	OrderGood  orderGood
	Team       team
	TeamUser   teamUser
	User       user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Doc:        q.Doc.clone(db),
		DocGroup:   q.DocGroup.clone(db),
		GlobalConf: q.GlobalConf.clone(db),
		Good:       q.Good.clone(db),
		GoodsSku:   q.GoodsSku.clone(db),
		GoodsSpec:  q.GoodsSpec.clone(db),
		Order:      q.Order.clone(db),
		OrderGood:  q.OrderGood.clone(db),
		Team:       q.Team.clone(db),
		TeamUser:   q.TeamUser.clone(db),
		User:       q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Doc:        q.Doc.replaceDB(db),
		DocGroup:   q.DocGroup.replaceDB(db),
		GlobalConf: q.GlobalConf.replaceDB(db),
		Good:       q.Good.replaceDB(db),
		GoodsSku:   q.GoodsSku.replaceDB(db),
		GoodsSpec:  q.GoodsSpec.replaceDB(db),
		Order:      q.Order.replaceDB(db),
		OrderGood:  q.OrderGood.replaceDB(db),
		Team:       q.Team.replaceDB(db),
		TeamUser:   q.TeamUser.replaceDB(db),
		User:       q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Doc        IDocDo
	DocGroup   IDocGroupDo
	GlobalConf IGlobalConfDo
	Good       IGoodDo
	GoodsSku   IGoodsSkuDo
	GoodsSpec  IGoodsSpecDo
	Order      IOrderDo
	OrderGood  IOrderGoodDo
	Team       ITeamDo
	TeamUser   ITeamUserDo
	User       IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Doc:        q.Doc.WithContext(ctx),
		DocGroup:   q.DocGroup.WithContext(ctx),
		GlobalConf: q.GlobalConf.WithContext(ctx),
		Good:       q.Good.WithContext(ctx),
		GoodsSku:   q.GoodsSku.WithContext(ctx),
		GoodsSpec:  q.GoodsSpec.WithContext(ctx),
		Order:      q.Order.WithContext(ctx),
		OrderGood:  q.OrderGood.WithContext(ctx),
		Team:       q.Team.WithContext(ctx),
		TeamUser:   q.TeamUser.WithContext(ctx),
		User:       q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
