// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fastduck/treasure-doc/service/mall/data/model"
)

func newGoodsSku(db *gorm.DB, opts ...gen.DOOption) goodsSku {
	_goodsSku := goodsSku{}

	_goodsSku.goodsSkuDo.UseDB(db, opts...)
	_goodsSku.goodsSkuDo.UseModel(&model.GoodsSku{})

	tableName := _goodsSku.goodsSkuDo.TableName()
	_goodsSku.ALL = field.NewAsterisk(tableName)
	_goodsSku.ID = field.NewInt32(tableName, "id")
	_goodsSku.GoodsID = field.NewInt32(tableName, "goods_id")
	_goodsSku.GoodsSpecIds = field.NewString(tableName, "goods_spec_ids")
	_goodsSku.Price = field.NewFloat64(tableName, "price")
	_goodsSku.Stock = field.NewInt32(tableName, "stock")
	_goodsSku.CreatedAt = field.NewTime(tableName, "created_at")
	_goodsSku.UpdatedAt = field.NewTime(tableName, "updated_at")
	_goodsSku.DeletedAt = field.NewField(tableName, "deleted_at")

	_goodsSku.fillFieldMap()

	return _goodsSku
}

type goodsSku struct {
	goodsSkuDo

	ALL          field.Asterisk
	ID           field.Int32
	GoodsID      field.Int32   // 商品id
	GoodsSpecIds field.String  // 规格id
	Price        field.Float64 // 价格
	Stock        field.Int32   // 库存
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (g goodsSku) Table(newTableName string) *goodsSku {
	g.goodsSkuDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g goodsSku) As(alias string) *goodsSku {
	g.goodsSkuDo.DO = *(g.goodsSkuDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *goodsSku) updateTableName(table string) *goodsSku {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.GoodsID = field.NewInt32(table, "goods_id")
	g.GoodsSpecIds = field.NewString(table, "goods_spec_ids")
	g.Price = field.NewFloat64(table, "price")
	g.Stock = field.NewInt32(table, "stock")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")

	g.fillFieldMap()

	return g
}

func (g *goodsSku) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *goodsSku) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["id"] = g.ID
	g.fieldMap["goods_id"] = g.GoodsID
	g.fieldMap["goods_spec_ids"] = g.GoodsSpecIds
	g.fieldMap["price"] = g.Price
	g.fieldMap["stock"] = g.Stock
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
}

func (g goodsSku) clone(db *gorm.DB) goodsSku {
	g.goodsSkuDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g goodsSku) replaceDB(db *gorm.DB) goodsSku {
	g.goodsSkuDo.ReplaceDB(db)
	return g
}

type goodsSkuDo struct{ gen.DO }

type IGoodsSkuDo interface {
	gen.SubQuery
	Debug() IGoodsSkuDo
	WithContext(ctx context.Context) IGoodsSkuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGoodsSkuDo
	WriteDB() IGoodsSkuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGoodsSkuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGoodsSkuDo
	Not(conds ...gen.Condition) IGoodsSkuDo
	Or(conds ...gen.Condition) IGoodsSkuDo
	Select(conds ...field.Expr) IGoodsSkuDo
	Where(conds ...gen.Condition) IGoodsSkuDo
	Order(conds ...field.Expr) IGoodsSkuDo
	Distinct(cols ...field.Expr) IGoodsSkuDo
	Omit(cols ...field.Expr) IGoodsSkuDo
	Join(table schema.Tabler, on ...field.Expr) IGoodsSkuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGoodsSkuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGoodsSkuDo
	Group(cols ...field.Expr) IGoodsSkuDo
	Having(conds ...gen.Condition) IGoodsSkuDo
	Limit(limit int) IGoodsSkuDo
	Offset(offset int) IGoodsSkuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodsSkuDo
	Unscoped() IGoodsSkuDo
	Create(values ...*model.GoodsSku) error
	CreateInBatches(values []*model.GoodsSku, batchSize int) error
	Save(values ...*model.GoodsSku) error
	First() (*model.GoodsSku, error)
	Take() (*model.GoodsSku, error)
	Last() (*model.GoodsSku, error)
	Find() ([]*model.GoodsSku, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoodsSku, err error)
	FindInBatches(result *[]*model.GoodsSku, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GoodsSku) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGoodsSkuDo
	Assign(attrs ...field.AssignExpr) IGoodsSkuDo
	Joins(fields ...field.RelationField) IGoodsSkuDo
	Preload(fields ...field.RelationField) IGoodsSkuDo
	FirstOrInit() (*model.GoodsSku, error)
	FirstOrCreate() (*model.GoodsSku, error)
	FindByPage(offset int, limit int) (result []*model.GoodsSku, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGoodsSkuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g goodsSkuDo) Debug() IGoodsSkuDo {
	return g.withDO(g.DO.Debug())
}

func (g goodsSkuDo) WithContext(ctx context.Context) IGoodsSkuDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goodsSkuDo) ReadDB() IGoodsSkuDo {
	return g.Clauses(dbresolver.Read)
}

func (g goodsSkuDo) WriteDB() IGoodsSkuDo {
	return g.Clauses(dbresolver.Write)
}

func (g goodsSkuDo) Session(config *gorm.Session) IGoodsSkuDo {
	return g.withDO(g.DO.Session(config))
}

func (g goodsSkuDo) Clauses(conds ...clause.Expression) IGoodsSkuDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goodsSkuDo) Returning(value interface{}, columns ...string) IGoodsSkuDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g goodsSkuDo) Not(conds ...gen.Condition) IGoodsSkuDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goodsSkuDo) Or(conds ...gen.Condition) IGoodsSkuDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goodsSkuDo) Select(conds ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goodsSkuDo) Where(conds ...gen.Condition) IGoodsSkuDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goodsSkuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGoodsSkuDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g goodsSkuDo) Order(conds ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goodsSkuDo) Distinct(cols ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goodsSkuDo) Omit(cols ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goodsSkuDo) Join(table schema.Tabler, on ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goodsSkuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goodsSkuDo) RightJoin(table schema.Tabler, on ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goodsSkuDo) Group(cols ...field.Expr) IGoodsSkuDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goodsSkuDo) Having(conds ...gen.Condition) IGoodsSkuDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goodsSkuDo) Limit(limit int) IGoodsSkuDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goodsSkuDo) Offset(offset int) IGoodsSkuDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goodsSkuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGoodsSkuDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goodsSkuDo) Unscoped() IGoodsSkuDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goodsSkuDo) Create(values ...*model.GoodsSku) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goodsSkuDo) CreateInBatches(values []*model.GoodsSku, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goodsSkuDo) Save(values ...*model.GoodsSku) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goodsSkuDo) First() (*model.GoodsSku, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsSku), nil
	}
}

func (g goodsSkuDo) Take() (*model.GoodsSku, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsSku), nil
	}
}

func (g goodsSkuDo) Last() (*model.GoodsSku, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsSku), nil
	}
}

func (g goodsSkuDo) Find() ([]*model.GoodsSku, error) {
	result, err := g.DO.Find()
	return result.([]*model.GoodsSku), err
}

func (g goodsSkuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GoodsSku, err error) {
	buf := make([]*model.GoodsSku, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goodsSkuDo) FindInBatches(result *[]*model.GoodsSku, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goodsSkuDo) Attrs(attrs ...field.AssignExpr) IGoodsSkuDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goodsSkuDo) Assign(attrs ...field.AssignExpr) IGoodsSkuDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goodsSkuDo) Joins(fields ...field.RelationField) IGoodsSkuDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g goodsSkuDo) Preload(fields ...field.RelationField) IGoodsSkuDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g goodsSkuDo) FirstOrInit() (*model.GoodsSku, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsSku), nil
	}
}

func (g goodsSkuDo) FirstOrCreate() (*model.GoodsSku, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GoodsSku), nil
	}
}

func (g goodsSkuDo) FindByPage(offset int, limit int) (result []*model.GoodsSku, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g goodsSkuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g goodsSkuDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g goodsSkuDo) Delete(models ...*model.GoodsSku) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *goodsSkuDo) withDO(do gen.Dao) *goodsSkuDo {
	g.DO = *do.(*gen.DO)
	return g
}
