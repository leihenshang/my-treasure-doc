// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"fastduck/treasure-doc/service/mall/data/model"
)

func newGlobalConf(db *gorm.DB, opts ...gen.DOOption) globalConf {
	_globalConf := globalConf{}

	_globalConf.globalConfDo.UseDB(db, opts...)
	_globalConf.globalConfDo.UseModel(&model.GlobalConf{})

	tableName := _globalConf.globalConfDo.TableName()
	_globalConf.ALL = field.NewAsterisk(tableName)
	_globalConf.ID = field.NewInt64(tableName, "id")
	_globalConf.Key = field.NewString(tableName, "key")
	_globalConf.Value = field.NewString(tableName, "value")
	_globalConf.CreatedAt = field.NewTime(tableName, "created_at")
	_globalConf.UpdatedAt = field.NewTime(tableName, "updated_at")
	_globalConf.DeletedAt = field.NewField(tableName, "deleted_at")
	_globalConf.Version = field.NewInt32(tableName, "version")
	_globalConf.CreatedBy = field.NewInt64(tableName, "created_by")

	_globalConf.fillFieldMap()

	return _globalConf
}

type globalConf struct {
	globalConfDo

	ALL       field.Asterisk
	ID        field.Int64
	Key       field.String
	Value     field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Version   field.Int32
	CreatedBy field.Int64

	fieldMap map[string]field.Expr
}

func (g globalConf) Table(newTableName string) *globalConf {
	g.globalConfDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g globalConf) As(alias string) *globalConf {
	g.globalConfDo.DO = *(g.globalConfDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *globalConf) updateTableName(table string) *globalConf {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Key = field.NewString(table, "key")
	g.Value = field.NewString(table, "value")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")
	g.Version = field.NewInt32(table, "version")
	g.CreatedBy = field.NewInt64(table, "created_by")

	g.fillFieldMap()

	return g
}

func (g *globalConf) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *globalConf) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["id"] = g.ID
	g.fieldMap["key"] = g.Key
	g.fieldMap["value"] = g.Value
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
	g.fieldMap["version"] = g.Version
	g.fieldMap["created_by"] = g.CreatedBy
}

func (g globalConf) clone(db *gorm.DB) globalConf {
	g.globalConfDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g globalConf) replaceDB(db *gorm.DB) globalConf {
	g.globalConfDo.ReplaceDB(db)
	return g
}

type globalConfDo struct{ gen.DO }

type IGlobalConfDo interface {
	gen.SubQuery
	Debug() IGlobalConfDo
	WithContext(ctx context.Context) IGlobalConfDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGlobalConfDo
	WriteDB() IGlobalConfDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGlobalConfDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGlobalConfDo
	Not(conds ...gen.Condition) IGlobalConfDo
	Or(conds ...gen.Condition) IGlobalConfDo
	Select(conds ...field.Expr) IGlobalConfDo
	Where(conds ...gen.Condition) IGlobalConfDo
	Order(conds ...field.Expr) IGlobalConfDo
	Distinct(cols ...field.Expr) IGlobalConfDo
	Omit(cols ...field.Expr) IGlobalConfDo
	Join(table schema.Tabler, on ...field.Expr) IGlobalConfDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGlobalConfDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGlobalConfDo
	Group(cols ...field.Expr) IGlobalConfDo
	Having(conds ...gen.Condition) IGlobalConfDo
	Limit(limit int) IGlobalConfDo
	Offset(offset int) IGlobalConfDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGlobalConfDo
	Unscoped() IGlobalConfDo
	Create(values ...*model.GlobalConf) error
	CreateInBatches(values []*model.GlobalConf, batchSize int) error
	Save(values ...*model.GlobalConf) error
	First() (*model.GlobalConf, error)
	Take() (*model.GlobalConf, error)
	Last() (*model.GlobalConf, error)
	Find() ([]*model.GlobalConf, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GlobalConf, err error)
	FindInBatches(result *[]*model.GlobalConf, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GlobalConf) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGlobalConfDo
	Assign(attrs ...field.AssignExpr) IGlobalConfDo
	Joins(fields ...field.RelationField) IGlobalConfDo
	Preload(fields ...field.RelationField) IGlobalConfDo
	FirstOrInit() (*model.GlobalConf, error)
	FirstOrCreate() (*model.GlobalConf, error)
	FindByPage(offset int, limit int) (result []*model.GlobalConf, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGlobalConfDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g globalConfDo) Debug() IGlobalConfDo {
	return g.withDO(g.DO.Debug())
}

func (g globalConfDo) WithContext(ctx context.Context) IGlobalConfDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g globalConfDo) ReadDB() IGlobalConfDo {
	return g.Clauses(dbresolver.Read)
}

func (g globalConfDo) WriteDB() IGlobalConfDo {
	return g.Clauses(dbresolver.Write)
}

func (g globalConfDo) Session(config *gorm.Session) IGlobalConfDo {
	return g.withDO(g.DO.Session(config))
}

func (g globalConfDo) Clauses(conds ...clause.Expression) IGlobalConfDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g globalConfDo) Returning(value interface{}, columns ...string) IGlobalConfDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g globalConfDo) Not(conds ...gen.Condition) IGlobalConfDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g globalConfDo) Or(conds ...gen.Condition) IGlobalConfDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g globalConfDo) Select(conds ...field.Expr) IGlobalConfDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g globalConfDo) Where(conds ...gen.Condition) IGlobalConfDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g globalConfDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IGlobalConfDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g globalConfDo) Order(conds ...field.Expr) IGlobalConfDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g globalConfDo) Distinct(cols ...field.Expr) IGlobalConfDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g globalConfDo) Omit(cols ...field.Expr) IGlobalConfDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g globalConfDo) Join(table schema.Tabler, on ...field.Expr) IGlobalConfDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g globalConfDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGlobalConfDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g globalConfDo) RightJoin(table schema.Tabler, on ...field.Expr) IGlobalConfDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g globalConfDo) Group(cols ...field.Expr) IGlobalConfDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g globalConfDo) Having(conds ...gen.Condition) IGlobalConfDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g globalConfDo) Limit(limit int) IGlobalConfDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g globalConfDo) Offset(offset int) IGlobalConfDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g globalConfDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGlobalConfDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g globalConfDo) Unscoped() IGlobalConfDo {
	return g.withDO(g.DO.Unscoped())
}

func (g globalConfDo) Create(values ...*model.GlobalConf) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g globalConfDo) CreateInBatches(values []*model.GlobalConf, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g globalConfDo) Save(values ...*model.GlobalConf) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g globalConfDo) First() (*model.GlobalConf, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConf), nil
	}
}

func (g globalConfDo) Take() (*model.GlobalConf, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConf), nil
	}
}

func (g globalConfDo) Last() (*model.GlobalConf, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConf), nil
	}
}

func (g globalConfDo) Find() ([]*model.GlobalConf, error) {
	result, err := g.DO.Find()
	return result.([]*model.GlobalConf), err
}

func (g globalConfDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GlobalConf, err error) {
	buf := make([]*model.GlobalConf, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g globalConfDo) FindInBatches(result *[]*model.GlobalConf, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g globalConfDo) Attrs(attrs ...field.AssignExpr) IGlobalConfDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g globalConfDo) Assign(attrs ...field.AssignExpr) IGlobalConfDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g globalConfDo) Joins(fields ...field.RelationField) IGlobalConfDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g globalConfDo) Preload(fields ...field.RelationField) IGlobalConfDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g globalConfDo) FirstOrInit() (*model.GlobalConf, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConf), nil
	}
}

func (g globalConfDo) FirstOrCreate() (*model.GlobalConf, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GlobalConf), nil
	}
}

func (g globalConfDo) FindByPage(offset int, limit int) (result []*model.GlobalConf, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g globalConfDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g globalConfDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g globalConfDo) Delete(models ...*model.GlobalConf) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *globalConfDo) withDO(do gen.Dao) *globalConfDo {
	g.DO = *do.(*gen.DO)
	return g
}
